/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p qibusibusproxy -c IBusProxy -v org.freedesktop.IBus.xml org.freedesktop.IBus
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QIBUSIBUSPROXY_H_1268725630
#define QIBUSIBUSPROXY_H_1268725630

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.IBus
 */
class IBusProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.IBus"; }

public:
    IBusProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~IBusProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> CreateInputContext(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return asyncCallWithArgumentList(QLatin1String("CreateInputContext"), argumentList);
    }

    inline QDBusPendingReply<> Exit(bool restart)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(restart);
        return asyncCallWithArgumentList(QLatin1String("Exit"), argumentList);
    }

    inline QDBusPendingReply<QString> GetAddress()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetAddress"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> ListActiveEngines()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListActiveEngines"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> ListEngines()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListEngines"), argumentList);
    }

    inline QDBusPendingReply<QDBusVariant> Ping(const QDBusVariant &data)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(data);
        return asyncCallWithArgumentList(QLatin1String("Ping"), argumentList);
    }

    inline QDBusPendingReply<> RegisterComponent(const QDBusVariant &components)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(components);
        return asyncCallWithArgumentList(QLatin1String("RegisterComponent"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace freedesktop {
    typedef ::IBusProxy IBus;
  }
}
#endif
